//const sqlite3 = require("sqlite3").verbose();
import sqlite3 from "sqlite3";
const filepath = "./fish.db";

function createDbConnection() {
  const db = new sqlite3.Database(filepath, (error) => {
    if (error) {
      return console.error(error.message);
    }
  });
  console.log("Connection with SQLite has been established");
  return db;
}
export const db = createDbConnection();
db.exec(`CREATE TABLE IF NOT EXISTS USER (
    NOMBRE TEXT NOT NULL,
    APELLIDO TEXT NOT NULL,
    PASSWORD TEXT NOT NULL,
    TIPO_USUARIO INTEGER NOT NULL,
    EMAIL TEXT NOT NULL,
    TOKEN_SESSION TEXT,
    RUT TEXT NOT NULL
);
`);
db.exec(`CREATE TABLE IF NOT EXISTS BLOQUE_CALENDARIO (
    ID_BLOQUE INTEGER PRIMARY KEY AUTOINCREMENT,
    RUT_PACIENTE TEXT,
    RUT_MEDICO TEXT NOT NULL,
    FECHA NUMERIC NOT NULL,
    HR_INICIO NUMERIC NOT NULL
);`);
db.exec(`CREATE TABLE IF NOT EXISTS PROCEDIMIENTO_TRATAMIENTO (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    RUT_PACIENTE TEXT NOT NULL,
    TIPO INTEGER NOT NULL,
    FECHA NUMERIC NOT NULL,
    COMENTARIOS TEXT NOT NULL,
    FOREIGN KEY (RUT_PACIENTE) REFERENCES USER(RUT)
);`);
db.exec(`CREATE TABLE IF NOT EXISTS PROCEDIMIENTO_TRATAMIENTO (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    RUT_PACIENTE TEXT NOT NULL,
    TIPO INTEGER NOT NULL,
    FECHA NUMERIC NOT NULL,
    COMENTARIOS TEXT NOT NULL,
    FOREIGN KEY (RUT_PACIENTE) REFERENCES USER(RUT)
);`);

db.exec(`
CREATE TABLE IF NOT EXISTS HISTORIAL (
    ID_HISTORIAL INTEGER PRIMARY KEY AUTOINCREMENT,
    RUT TEXT NOT NULL,
    ID INTEGER NOT NULL,
    FOREIGN KEY (RUT) REFERENCES USER(RUT),
    FOREIGN KEY (ID) REFERENCES PROCEDIMIENTO_TRATAMIENTO(ID)
);`);
